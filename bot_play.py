import copy
from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)

# –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = ''

# –°–æ–∑–¥—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
FIELD_SIZE = 8

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
LEXICON = {
    '/start': '–í–æ—Ç —Ç–≤–æ—ë –ø–æ–ª–µ. –ú–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Ö–æ–¥',
    0: ' ',
    1: 'üåä',
    2: 'üí•',
    'miss': '–ú–∏–º–æ!',
    'hit': '–ü–æ–ø–∞–ª!',
    'used': '–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Å—é–¥–∞!',
    'next_move': '–î–µ–ª–∞–π—Ç–µ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥'
}

# –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –ø–æ–ª–µ
ships: list[list[int]] = [
     [1, 0, 1, 1, 1, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 1, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0]
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users: dict[int, dict[str, list]] = {}

# –°–æ–∑–¥–∞—ë–º —Å–≤–æ—Ü –∫–ª–∞—Å—Å —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤, —É–∫–∞–∑—ã–≤–∞—è –ø—Ä–µ—Ñ–∏–∫—Å
# –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É callback_data
class FiledCallbackFactory(CallbackData, prefix='user_field'):
    x: int
    y: int

# —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
def reset_field(user_id: int) -> None:
    users[user_id]['ships'] = copy.deepcopy(ships)
    users[user_id]['field'] = [
        [0 for _ in range(FIELD_SIZE)]
        for _ in range(FIELD_SIZE)
    ]

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö
# –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã —Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_field_keyboard(user_id: int) -> InlineKeyboardMarkup:
    array_buttons: list[list[InlineKeyboardButton]] = []

    for i in range(FIELD_SIZE):
        array_buttons.append([])
        for j in range(FIELD_SIZE):
            array_buttons[i].append(InlineKeyboardButton(
                text=LEXICON[users[user_id]['field'][i][j]],
                callback_data=FiledCallbackFactory(x=i, y=j).pack()
            ))
    return InlineKeyboardMarkup(inline_keyboard=array_buttons)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—å—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω—É–ª—è—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
@dp.message(CommandStart())
async def process_start_command(message: Message):
    if message.from_user.id not in users:
        users[message.from_user.id] = {}
    reset_field(message.from_user.id)
    await message.answer(
        text=LEXICON['/start'],
        reply_markup=get_field_keyboard(message.from_user.id)
    )

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ–ª–µ,
# –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–∂–∞—Ç–∏—è –∏ —Ñ–æ—Ä–∏–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(FiledCallbackFactory.filter())
async def process_category_process(callback: CallbackQuery,
                                   callback_data: FiledCallbackFactory):
    field = users[callback.from_user.id]['field']
    ships = users[callback.from_user.id]['ships']
    if field[callback_data.x][callback_data.y] == 0 and \
    ships[callback_data.x][callback_data.y] == 0:
        answer = LEXICON['miss']
        field[callback_data.x][callback_data.y] = 1
    elif field[callback_data.x][callback_data.y] == 0 and \
    ships[callback_data.x][callback_data.y] == 1:
        answer = LEXICON['hit']
        field[callback_data.x][callback_data.y] = 2
    else:
        answer = LEXICON['used']

    try:
        await callback.message.edit_text(
            text=LEXICON['next_move'],
            reply_markup=get_field_keyboard(callback.from_user.id)
        )
    except TelegramBadRequest:
        pass
    await callback.answer(answer)

dp.run_polling(bot)
